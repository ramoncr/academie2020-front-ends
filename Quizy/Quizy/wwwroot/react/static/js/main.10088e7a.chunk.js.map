{"version":3,"sources":["store/actions/question.action.ts","store/actions/participant.action.ts","components/molecules/index.ts","components/index.ts","models/participant.model.ts","components/molecules/number-input/number-input.component.tsx","components/molecules/text-input/text-input.component.tsx","components/about/about.component.tsx","components/admin/question-row/question-row.component.tsx","components/admin/questions-table/questions-table.component.tsx","components/admin/questions/questions.container.ts","components/admin/questions/questions.component.tsx","components/admin/answer-row/answer-row.component.tsx","components/admin/question-form/question-form.component.tsx","models/anwer.model.ts","models/question.model.ts","components/admin/question-create/question-create.container.ts","components/admin/question-create/question-create.component.tsx","components/questions/questions.container.ts","components/questions/questions.component.tsx","components/header/header.container.ts","components/header/header.component.tsx","components/register/register.container.ts","components/register/register.component.tsx","routes/admin.route.tsx","App.tsx","store/reducers/participant.reducer.ts","store/reducers/question.reducer.ts","store/reducers/index.ts","store/index.ts","environment/dev.environment.ts","environment/prod.environment.ts","environment/environment.ts","index.tsx"],"names":["GET_QUESTIONS_PENDING","GET_QUESTIONS_SUCCESS","GET_QUESTIONS_ERROR","getQuestions","dispatch","getQuestionsPending","axios","get","then","res","getQuestionsSuccess","data","catch","error","getQuestionsError","type","questions","POST_QUESTION_PENDING","POST_QUESTION_SUCCESS","POST_QUESTION_ERROR","postQuestion","question","postQuestionPending","post","postQuestionSuccess","postQuestionError","PUT_QUESTION_PENDING","PUT_QUESTION_SUCCESS","PUT_QUESTION_ERROR","putQuestion","putQuestionPending","put","id","putQuestionSuccess","putQuestionError","DELETE_QUESTION_PENDING","DELETE_QUESTION_SUCCESS","DELETE_QUESTION_ERROR","deleteQuestion","deleteQuestionPending","delete","deleteQuestionSuccess","deleteQuestionError","GET_PARTICIPANT_PENDING","GET_PARTICIPANT_SUCCESS","GET_PARTICIPANT_ERROR","getParticipant","getParticipantPending","getParticipantSuccess","getParticipantError","participant","POST_PARTICIPANT_PENDING","POST_PARTICIPANT_SUCCESS","POST_PARTICIPANT_ERROR","postParticipant","postParticipantPending","localStorage","setItem","toString","postParticipantSuccess","postParticipantError","PUT_PARTICIPANT_PENDING","PUT_PARTICIPANT_SUCCESS","PUT_PARTICIPANT_ERROR","putParticipant","putParticipantPending","putParticipantSuccess","putParticipantError","HANDLE_ANSWER","handleAnswer","score","CLEAR_PARTICIPANT","clearParticipant","Participant","name","questionsAnswered","NumberInput","props","label","placeholder","useState","value","setValue","className","htmlFor","onChange","event","parseInt","currentTarget","onValueChange","TextInput","About","QuestionRow","onDeleteQuestion","onEditQuestion","content","description","onClick","style","fontSize","AdminQuestionsTable","map","q","key","connect","state","history","useHistory","useEffect","length","push","AdminAnswerRow","answer","setAnswer","index","text","AdminQuestionForm","setQuestion","onAnswerChange","answers","image","video","Answer","Question","this","questionPending","pending","questionId","useParams","existingQuestion","find","editing","submitting","setSubmitting","e","disabled","currentQuestion","selectedAnswer","setSelectedAnswer","setCurrentQuestion","onAnswerChanged","currentParticipantId","getItem","src","height","alt","width","allow","allowFullScreen","title","option","checked","a","alert","removeItem","to","setName","setError","isNameAvailable","AdminRoute","component","rest","isAdmin","render","React","createElement","App","basename","exact","from","path","Register","Questions","AdminQuestionCreate","AdminQuestions","initialState","rootReducer","combineReducers","action","questionIndexPut","findIndex","questionIndexDelete","splice","questionsInitialState","participantInitialState","createStore","applyMiddleware","thunk","devEnvironment","baseUrl","prodEnvironment","process","REACT_APP_STAGE","defaults","baseURL","environment","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.10088e7a.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { Question } from '../../models/question.model';\r\nimport { Action } from 'redux';\r\n\r\n// Get\r\nexport const GET_QUESTIONS = 'GEt_QUESTIONS';\r\nexport const GET_QUESTIONS_PENDING = 'GEt_QUESTIONS_PENDING';\r\nexport const GET_QUESTIONS_SUCCESS = 'GET_QUESTIONS_SUCCESS';\r\nexport const GET_QUESTIONS_ERROR = 'GEt_QUESTIONS_ERROR';\r\n\r\nexport const getQuestions = () =>\r\n    (dispatch: (action: Action) => void) => {\r\n        dispatch(getQuestionsPending());\r\n        axios.get<Array<Question>>(`questions`)\r\n            .then(res => {\r\n                dispatch(getQuestionsSuccess(res.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(getQuestionsError(error));\r\n            });\r\n    };\r\n\r\nexport const getQuestionsPending = () => ({ type: GET_QUESTIONS_PENDING });\r\nexport const getQuestionsSuccess = (questions: Array<Question>) => ({ type: GET_QUESTIONS_SUCCESS, questions });\r\nexport const getQuestionsError = (error: any) => ({ type: GET_QUESTIONS_ERROR, error });\r\n\r\n// Post\r\nexport const POST_QUESTION = 'POST_QUESTIONS';\r\nexport const POST_QUESTION_PENDING = 'POST_QUESTIONS_PENDING';\r\nexport const POST_QUESTION_SUCCESS = 'POST_QUESTIONS_SUCCESS';\r\nexport const POST_QUESTION_ERROR = 'POST_QUESTIONS_ERROR';\r\n\r\nexport const postQuestion = (question: Question) =>\r\n    (dispatch: (action: Action) => void) => {\r\n        dispatch(postQuestionPending());\r\n        axios.post<Question>(`questions`, question)\r\n            .then(res => {\r\n                dispatch(postQuestionSuccess(res.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(postQuestionError(error));\r\n            });\r\n    };\r\n\r\nexport const postQuestionPending = () => ({ type: POST_QUESTION_PENDING });\r\nexport const postQuestionSuccess = (question: Question) => ({ type: POST_QUESTION_SUCCESS, question });\r\nexport const postQuestionError = (error: any) => ({ type: POST_QUESTION_ERROR, error });\r\n\r\n// Put\r\nexport const PUT_QUESTION = 'PUT_QUESTIONS';\r\nexport const PUT_QUESTION_PENDING = 'PUT_QUESTIONS_PENDING';\r\nexport const PUT_QUESTION_SUCCESS = 'PUT_QUESTIONS_SUCCESS';\r\nexport const PUT_QUESTION_ERROR = 'PUT_QUESTIONS_ERROR';\r\n\r\nexport const putQuestion = (question: Question) =>\r\n    (dispatch: (action: Action) => void) => {\r\n        dispatch(putQuestionPending());\r\n        axios.put<Question>(`questions/${question.id}`, question)\r\n            .then(res => {\r\n                dispatch(putQuestionSuccess(res.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(putQuestionError(error));\r\n            });\r\n    };\r\n\r\nexport const putQuestionPending = () => ({ type: PUT_QUESTION_PENDING });\r\nexport const putQuestionSuccess = (question: Question) => ({ type: PUT_QUESTION_SUCCESS, question });\r\nexport const putQuestionError = (error: any) => ({ type: PUT_QUESTION_ERROR, error });\r\n\r\n// Delete\r\nexport const DELETE_QUESTION = 'DELETE_QUESTIONS';\r\nexport const DELETE_QUESTION_PENDING = 'DELETE_QUESTIONS_PENDING';\r\nexport const DELETE_QUESTION_SUCCESS = 'DELETE_QUESTIONS_SUCCESS';\r\nexport const DELETE_QUESTION_ERROR = 'DELETE_QUESTIONS_ERROR';\r\n\r\nexport const deleteQuestion = (id: number) =>\r\n    (dispatch: (action: Action) => void) => {\r\n        dispatch(deleteQuestionPending());\r\n        axios.delete<Question>(`questions/${id}`)\r\n            .then(res => {\r\n                dispatch(deleteQuestionSuccess(res.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(deleteQuestionError(error));\r\n            });\r\n    };\r\n\r\nexport const deleteQuestionPending = () => ({ type: DELETE_QUESTION_PENDING });\r\nexport const deleteQuestionSuccess = (question: Question) => ({ type: DELETE_QUESTION_SUCCESS, question });\r\nexport const deleteQuestionError = (error: any) => ({ type: DELETE_QUESTION_ERROR, error });","import { Action } from 'redux';\r\nimport axios from 'axios';\r\nimport { Participant } from '../../models/participant.model';\r\n\r\n// Get\r\nexport const GET_PARTICIPANT = 'GET_PARTICIPANT';\r\nexport const GET_PARTICIPANT_PENDING = 'GET_PARTICIPANT_PENDING';\r\nexport const GET_PARTICIPANT_SUCCESS = 'GET_PARTICIPANT_SUCCESS';\r\nexport const GET_PARTICIPANT_ERROR = 'GET_PARTICIPANT_ERROR';\r\n\r\nexport const getParticipant = (id: number) =>\r\n    (dispatch: (action: Action) => void) => {\r\n        dispatch(getParticipantPending());\r\n        axios.get<Participant>(`participants/${id}`)\r\n            .then(res => {\r\n                dispatch(getParticipantSuccess(res.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(getParticipantError(error));\r\n            });\r\n    }\r\nexport const getParticipantPending = () => ({ type: GET_PARTICIPANT_PENDING });\r\nexport const getParticipantSuccess = (participant: Participant) => ({ type: GET_PARTICIPANT_SUCCESS, participant });\r\nexport const getParticipantError = (error: any) => ({ type: GET_PARTICIPANT_ERROR, error });\r\n\r\n// Post\r\nexport const POST_PARTICIPANT = 'POST_PARTICIPANT';\r\nexport const POST_PARTICIPANT_PENDING = 'POST_PARTICIPANT_PENDING';\r\nexport const POST_PARTICIPANT_SUCCESS = 'POST_PARTICIPANT_SUCCESS';\r\nexport const POST_PARTICIPANT_ERROR = 'POST_PARTICIPANT_ERROR';\r\n\r\nexport const postParticipant = (participant: Participant) =>\r\n    (dispatch: (action: Action) => void) => {\r\n        dispatch(postParticipantPending());\r\n        axios.post<Participant>(`participants`, participant)\r\n            .then(res => {\r\n                localStorage.setItem('currentParticipant', res.data.id.toString());\r\n                dispatch(postParticipantSuccess(res.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(postParticipantError(error));\r\n            });\r\n    }\r\nexport const postParticipantPending = () => ({ type: POST_PARTICIPANT_PENDING });\r\nexport const postParticipantSuccess = (participant: Participant) => ({ type: POST_PARTICIPANT_SUCCESS, participant });\r\nexport const postParticipantError = (error: any) => ({ type: POST_PARTICIPANT_ERROR, error });\r\n\r\n// Put\r\nexport const PUT_PARTICIPANT = 'POST_PARTICIPANT';\r\nexport const PUT_PARTICIPANT_PENDING = 'POST_PARTICIPANT_PENDING';\r\nexport const PUT_PARTICIPANT_SUCCESS = 'POST_PARTICIPANT_SUCCESS';\r\nexport const PUT_PARTICIPANT_ERROR = 'POST_PARTICIPANT_ERROR';\r\n\r\nexport const putParticipant = (participant: Participant) =>\r\n    (dispatch: (action: Action) => void) => {\r\n        dispatch(putParticipantPending());\r\n        axios.put<Participant>(`participants/${participant.id}`, participant)\r\n            .then(res => {\r\n                dispatch(putParticipantSuccess(res.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(putParticipantError(error));\r\n            });\r\n    }\r\nexport const putParticipantPending = () => ({ type: PUT_PARTICIPANT_PENDING });\r\nexport const putParticipantSuccess = (participant: Participant) => ({ type: PUT_PARTICIPANT_SUCCESS, participant });\r\nexport const putParticipantError = (error: any) => ({ type: PUT_PARTICIPANT_ERROR, error });\r\n\r\n// Handle answer\r\nexport const HANDLE_ANSWER = 'HANDLE_ANSWER';\r\n\r\nexport const handleAnswer = (score: number) => ({ type: HANDLE_ANSWER, score });\r\n\r\n// Clear\r\nexport const CLEAR_PARTICIPANT = 'CLEAR_PARTICIPANT';\r\n\r\nexport const clearParticipant = () => ({ type: CLEAR_PARTICIPANT });\r\n","export * from './number-input/number-input.component';\r\nexport * from './text-input/text-input.component';\r\nexport * from './input-change-event.model';\r\n","export * from './molecules';\r\nexport * from './admin';\r\nexport { default as Questions } from './questions/questions.container';\r\nexport { default as Header } from './header/header.container';\r\nexport { default as Register } from './register/register.container';\r\nexport * from './about/about.component';","export class Participant {\r\n    public id: number = 0;\r\n    public name: string = '';\r\n    public score: number = 0;\r\n    public questionsAnswered: number = 0;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { InputChangeEvent } from '../input-change-event.model';\r\nimport './number-input.component.scss';\r\n\r\ninterface Props {\r\n    id: string;\r\n    label: string;\r\n    placeholder?: string;\r\n    value?: number;\r\n\r\n    onValueChange: (value: InputChangeEvent<number>) => void;\r\n}\r\n\r\nexport const NumberInput = (props: Props) => {\r\n    const { id, label, placeholder } = props;\r\n\r\n    const [value, setValue] = useState(props.value);\r\n\r\n    function onValueChange(event: React.FormEvent<HTMLInputElement>) {\r\n        const value = parseInt(event.currentTarget.value) || 0;\r\n        setValue(value);\r\n        props.onValueChange({\r\n            value: value,\r\n            name: event.currentTarget.name\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"u-full-width\">\r\n                <label htmlFor={id}>{label}</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder={placeholder}\r\n                    id={id}\r\n                    value={value}\r\n                    onChange={onValueChange}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};","import React, { useState } from 'react';\r\nimport { InputChangeEvent } from '../input-change-event.model';\r\nimport './text-input.component.scss';\r\n\r\ninterface Props {\r\n    id: string;\r\n    label: string;\r\n    name?: string;\r\n    placeholder?: string;\r\n    value?: string;\r\n\r\n    onValueChange: (event: InputChangeEvent<string>) => void;\r\n}\r\n\r\nexport const TextInput = (props: Props) => {\r\n    const { id, label, placeholder, name } = props;\r\n\r\n    const [value, setValue] = useState(props.value);\r\n\r\n    function onValueChange(event: React.FormEvent<HTMLInputElement>) {\r\n        setValue(event.currentTarget.value);\r\n        props.onValueChange({\r\n            name: event.currentTarget.name,\r\n            value: event.currentTarget.value\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"text-input\">\r\n                <label htmlFor={id}>{label}</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder={placeholder}\r\n                    id={id}\r\n                    name={name}\r\n                    value={value}\r\n                    onChange={onValueChange}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport './about.component.scss';\r\n\r\nexport const About = () =>\r\n    (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"twelve columns\">\r\n                    <div className=\"about\">\r\n                        <h1>This is an about page</h1>\r\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n                            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n                            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n","import React from 'react';\r\nimport { Question } from '../../../models';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\ninterface Props {\r\n    question: Question;\r\n    onDeleteQuestion: (question: Question) => void;\r\n    onEditQuestion: (question: Question) => void;\r\n}\r\n\r\nexport const QuestionRow = (props: Props) => {\r\n    const { question, onDeleteQuestion, onEditQuestion } = props;\r\n\r\n    const onDeleteQuestionClicked = () => onDeleteQuestion(question);\r\n    const onEditQuestionClicked = () => onEditQuestion(question);\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>{question.id}</td>\r\n                <td>{question.content}</td>\r\n                <td>{question.description}</td>\r\n                <td>\r\n                    <button onClick={onDeleteQuestionClicked}>\r\n                        <DeleteIcon style={{ fontSize: 24 }} />\r\n                    </button>\r\n                    <button onClick={onEditQuestionClicked}>\r\n                        <EditIcon style={{ fontSize: 24 }} />\r\n                    </button>\r\n                </td >\r\n            </tr >\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Question } from '../../../models';\r\nimport { QuestionRow } from '../question-row/question-row.component';\r\nimport './questions-table.component.scss';\r\n\r\ninterface Props {\r\n    questions: Array<Question>;\r\n    onDeleteQuestion: (question: Question) => void;\r\n    onEditQuestion: (question: Question) => void;\r\n}\r\n\r\nexport const AdminQuestionsTable = (props: Props) => {\r\n    const { questions, onDeleteQuestion, onEditQuestion } = props;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"twelve columns\">\r\n                    <table id=\"questions-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th id=\"question-id\">#</th>\r\n                                <th id=\"question-content\">Content</th>\r\n                                <th id=\"question-description\">Description</th>\r\n                                <th id=\"question-actions\">Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {questions.map(q => <QuestionRow key={q.id} question={q} onDeleteQuestion={onDeleteQuestion} onEditQuestion={onEditQuestion} />)}\r\n                        </tbody>\r\n                    </table>\r\n                </div >\r\n            </div >\r\n        </>\r\n    );\r\n};\r\n","import { AdminQuestions } from './questions.component';\r\nimport { IRootState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { getQuestions, deleteQuestion, putQuestion } from \"../../../store/actions/question.action\";\r\nimport { Question } from \"../../../models\";\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n    questions: state.questions.data\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (action: any) => void) => ({\r\n    getQuestions: () => dispatch(getQuestions()),\r\n    deleteQuestion: (id: number) => dispatch(deleteQuestion(id)),\r\n    putQuestion: (question: Question) => dispatch(putQuestion(question))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminQuestions);","import React, { useEffect } from 'react';\r\nimport { AdminQuestionsTable } from '../questions-table/questions-table.component';\r\nimport { Question } from '../../../models';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface Props {\r\n    questions: Array<Question>;\r\n    getQuestions: () => void;\r\n    deleteQuestion: (id: number) => void;\r\n}\r\n\r\nexport const AdminQuestions = (props: Props) => {\r\n    const { questions, getQuestions } = props;\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (questions.length === 0) {\r\n            getQuestions();\r\n        }\r\n    }, [questions, getQuestions]);\r\n\r\n    function createNewQuestion() {\r\n        history.push('/admin/questions/create');\r\n    }\r\n\r\n    const onDeleteQuestion = (question: Question) => props.deleteQuestion(question.id);\r\n    const onEditQuestion = (question: Question) => {\r\n        history.push(`/admin/questions/create/${question.id}`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>Question Management</h1>\r\n            <button onClick={createNewQuestion}>Create new question</button>\r\n            <AdminQuestionsTable questions={props.questions} onDeleteQuestion={onDeleteQuestion} onEditQuestion={onEditQuestion} />\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { TextInput, NumberInput, InputChangeEvent } from '../../molecules';\r\nimport { Answer } from '../../../models';\r\n\r\nexport interface AnswerChangeEvent{\r\n    answer: Answer;\r\n    index: number;\r\n}\r\n\r\ninterface Props {\r\n    answer: Answer;\r\n    index: number;\r\n    onChange: (event: AnswerChangeEvent) => void;\r\n}\r\n\r\nexport const AdminAnswerRow = (props: Props) => {\r\n    const [answer, setAnswer] = useState(props.answer);\r\n    const [index] = useState(props.index);\r\n\r\n    function onChangeText(event: InputChangeEvent<string>) {\r\n        answer.text = event.value;\r\n        setAnswer(answer);\r\n    }\r\n\r\n    function onChangeScore(event: InputChangeEvent<number>) {\r\n        answer.score = event.value;\r\n        setAnswer(answer);\r\n        props.onChange({answer, index});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"eight columns\">\r\n                    <TextInput\r\n                        id={`question-answer-${index}-text`}\r\n                        placeholder=\"The answer\"\r\n                        label={`Answer ${index + 1}`}\r\n                        value={answer.text}\r\n                        onValueChange={onChangeText}\r\n                    />\r\n                </div>\r\n                <div className=\"four columns\">\r\n                    <NumberInput\r\n                        id={`question-answer-${index}-score`}\r\n                        placeholder=\"300\"\r\n                        label=\"Score\"\r\n                        value={answer.score}\r\n                        onValueChange={onChangeScore}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};","import React, { useState } from 'react';\r\nimport { Question } from '../../../models';\r\nimport { TextInput, InputChangeEvent } from '../../molecules';\r\nimport { AdminAnswerRow, AnswerChangeEvent } from '../answer-row/answer-row.component';\r\n\r\ninterface Props {\r\n    question: Question;\r\n    onChange: (question: Question) => void;\r\n}\r\n\r\nexport const AdminQuestionForm = (props: Props) => {\r\n    const { onChange } = props;\r\n\r\n    const [question, setQuestion] = useState(props.question);\r\n\r\n    function onValueChange(event: InputChangeEvent<any>) {\r\n        (question as any)[event.name] = event.value;\r\n        setQuestion(question);\r\n        onChange(question);\r\n    }\r\n\r\n    function onAnswerChange(event: AnswerChangeEvent){\r\n        question.answers[event.index] = event.answer;\r\n        setQuestion(question);\r\n        onChange(question);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"twelve columns\">\r\n                    <TextInput\r\n                        id=\"question-content\"\r\n                        name=\"content\"\r\n                        placeholder=\"Example question?\"\r\n                        label=\"Content\"\r\n                        value={question.content}\r\n                        onValueChange={onValueChange}\r\n                    />\r\n                    <TextInput\r\n                        id=\"question-description\"\r\n                        name=\"description\"\r\n                        placeholder=\"A description for the question\"\r\n                        label=\"Description\"\r\n                        value={question.description}\r\n                        onValueChange={onValueChange}\r\n                    />\r\n                    <TextInput\r\n                        id=\"question-image\"\r\n                        name=\"image\"\r\n                        placeholder=\"https://image.src/cute-animal.png\"\r\n                        label=\"Image URL\"\r\n                        value={question.image}\r\n                        onValueChange={onValueChange}\r\n                    />\r\n                    <TextInput\r\n                        id=\"question-video\"\r\n                        name=\"video\"\r\n                        placeholder=\"https://www.youtube.com/embed/FeJKJ5MoCHY\"\r\n                        label=\"Video Embed URL\"\r\n                        value={question.video}\r\n                        onValueChange={onValueChange}\r\n                    />\r\n\r\n                    <hr />\r\n                    <h3>Answers</h3>\r\n                    <AdminAnswerRow answer={question.answers[0]} index={0} onChange={onAnswerChange}/>\r\n                    <AdminAnswerRow answer={question.answers[1]} index={1} onChange={onAnswerChange}/>\r\n                    <AdminAnswerRow answer={question.answers[2]} index={2} onChange={onAnswerChange}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","export class Answer {\r\n    public id: number = 0;\r\n    public text: string = '';\r\n    public score: number = 0;\r\n}\r\n","import { Answer } from './anwer.model';\r\n\r\nexport class Question {\r\n    public id: number = 0;\r\n    public content: string = '';\r\n    public description: string = '';\r\n    public image: string = '';\r\n    public video: string = '';\r\n    public answers: Array<Answer> = [];\r\n\r\n    constructor();\r\n    constructor(answers: Array<Answer>);\r\n    constructor(answers?: Array<Answer>) {\r\n        if (answers) { this.answers = answers; }\r\n    }\r\n}\r\n","import { AdminQuestionCreate } from './question-create.component';\r\nimport { IRootState } from '../../../store';\r\nimport { getQuestions, postQuestion, putQuestion } from '../../../store/actions/question.action';\r\nimport { Question } from '../../../models';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n    questions: state.questions.data,\r\n    questionPending: state.questions.pending\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (action: any) => void) => ({\r\n    getQuestions: () => dispatch(getQuestions()),\r\n    postQuestion: (question: Question) => dispatch(postQuestion(question)),\r\n    putQuestion: (question: Question) => dispatch(putQuestion(question))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminQuestionCreate);","import React, { useEffect, useState } from 'react';\r\nimport { AdminQuestionForm } from '../question-form/question-form.component';\r\nimport { Answer, Question } from '../../../models';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\ninterface Props {\r\n    questions: Array<Question>;\r\n    questionPending: boolean;\r\n    getQuestions: () => void;\r\n    postQuestion: (question: Question) => void;\r\n    putQuestion: (question: Question) => void;\r\n}\r\n\r\nexport const AdminQuestionCreate = (props: Props) => {\r\n    const { questions, getQuestions, putQuestion, postQuestion, questionPending } = props;\r\n    const { questionId } = useParams();\r\n    const existingQuestion = questions.find(q => q.id === parseInt(questionId ?? '')) ?? new Question([new Answer(), new Answer(), new Answer()]);\r\n\r\n    const [editing] = useState(questionId != null);\r\n    const [question, setQuestion] = useState(existingQuestion);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (questionId != null && questions.length === 0) {\r\n            getQuestions();\r\n        }\r\n    }, [questions, questionId, getQuestions]);\r\n\r\n    useEffect(() => {\r\n        if (submitting && !questionPending) {\r\n            history.push('/admin');\r\n        }\r\n    }, [submitting, questionPending, history]);\r\n\r\n    function submit() {\r\n        editing ? putQuestion(question) : postQuestion(question);\r\n        setSubmitting(true);\r\n    }\r\n\r\n    function cancel() {\r\n        history.push('/admin');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>{editing ? 'Edit the question' : 'Create a new question'}</h1>\r\n            <AdminQuestionForm question={question} onChange={e => setQuestion({ ...e })} />\r\n            <button onClick={cancel}>Cancel</button>\r\n            <button className=\"button-primary u-pull-right\" onClick={submit} disabled={!question.content}>{editing ? 'Edit' : 'Create'}</button>\r\n        </>\r\n    );\r\n}\r\n","import { putParticipant, handleAnswer, clearParticipant } from './../../store/actions/participant.action';\r\nimport { Participant } from './../../models/participant.model';\r\nimport { connect } from 'react-redux';\r\nimport { getParticipant } from '../../store/actions/participant.action';\r\nimport { getQuestions } from '../../store/actions/question.action';\r\nimport { IRootState } from '../../store';\r\nimport { Questions } from './questions.component';\r\n\r\nconst mapStateToProps = (state: IRootState) => {\r\n    return {\r\n        participant: state.participant.data,\r\n        questions: state.questions.data,\r\n        currentQuestion: state.questions.data.find(q => q.id === state.participant.data?.id) ?? null\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: (action: any) => void) => ({\r\n    getQuestions: () => dispatch(getQuestions()),\r\n    getParticipant: (id: number) => dispatch(getParticipant(id)),\r\n    putParticipant: (participant: Participant) => dispatch(putParticipant(participant)),\r\n    handleAnswer: (score: number) => dispatch(handleAnswer(score)),\r\n    clearParticipant: () => dispatch(clearParticipant())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","import React, { useEffect, useState } from 'react';\r\nimport './questions.component.scss';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Participant } from '../../models/participant.model';\r\nimport { Question } from '../../models/question.model';\r\n\r\ninterface Props {\r\n    participant: Participant | null;\r\n    questions: Array<Question>;\r\n    currentQuestion: Question | null;\r\n    getQuestions: () => void;\r\n    getParticipant: (id: number) => void;\r\n    putParticipant: (participant: Participant) => void;\r\n    clearParticipant: () => void;\r\n    handleAnswer: (score: number) => void;\r\n}\r\n\r\nexport const Questions = (props: Props) => {\r\n    const { participant, questions, getQuestions, getParticipant, putParticipant, handleAnswer, clearParticipant } = props;\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState(-1);\r\n    const [currentQuestion, setCurrentQuestion] = useState<Question | null>(props.currentQuestion);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (participant) {\r\n            getQuestions();\r\n        } else {\r\n            const currentParticipantId = parseInt(localStorage.getItem('currentParticipant') ?? '');\r\n            if (currentParticipantId) {\r\n                getParticipant(currentParticipantId);\r\n            } else {\r\n                history.push('/register');\r\n            }\r\n        }\r\n    }, [participant, getParticipant, getQuestions, history]);\r\n\r\n    useEffect(() => {\r\n        if (participant && questions?.length > 0 && !currentQuestion) {\r\n            setCurrentQuestion(questions[participant.questionsAnswered]);\r\n        }\r\n    }, [questions, currentQuestion, participant]);\r\n\r\n    function submit() {\r\n        if (!participant) { return; }\r\n        const answer = currentQuestion?.answers.find(a => a.id === selectedAnswer);\r\n        if (answer) {\r\n            handleAnswer(answer.score);\r\n            setSelectedAnswer(-1);\r\n            putParticipant(participant);\r\n\r\n            if (participant.questionsAnswered >= questions.length) {\r\n                alert(`That was the last question; Your score was: ${participant.score}; You will be logged out.`);\r\n                clearParticipant();\r\n                localStorage.removeItem('currentParticipant');\r\n                history.push('/register');\r\n            } else {\r\n                setCurrentQuestion(questions[participant.questionsAnswered]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onAnswerChanged(event: React.FormEvent<HTMLInputElement>) {\r\n        setSelectedAnswer(parseInt(event.currentTarget.value));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                {participant &&\r\n                    <div className=\"row\" id=\"score-row\">\r\n                        <div className=\"six columns\">\r\n                            Your score: {participant.score} points\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {currentQuestion && <>\r\n                    <div className=\"row\">\r\n                        <div className=\"twelve columns\">\r\n                            <h2>\r\n                                {currentQuestion.content}\r\n                                <small>\r\n                                    {participant &&\r\n                                        <span>{participant.questionsAnswered + 1}/{questions.length}</span>\r\n                                    }\r\n                                </small>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n                    {currentQuestion.image &&\r\n                        <div className=\"row\" >\r\n                            <div className=\"twelve columns\">\r\n                                <img src={currentQuestion.image} height=\"315\" alt=\"qi\" />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {currentQuestion.video &&\r\n                        <div className=\"row\">\r\n                            <div className=\"twelve columns\">\r\n                                <iframe\r\n                                    src={currentQuestion.video}\r\n                                    width=\"560\"\r\n                                    height=\"315\"\r\n                                    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                                    allowFullScreen\r\n                                    title=\"Question Video\">\r\n                                </iframe>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <div className=\"row\">\r\n                        <div className=\"twelve columns\">\r\n                            <p>{currentQuestion.description}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"twelve columns\">\r\n                            {\r\n                                currentQuestion.answers.map(option => (\r\n                                    <label key={option.id}>\r\n                                        <input type=\"radio\" value={option.id} name=\"answer\" checked={selectedAnswer === option.id} onChange={onAnswerChanged} />\r\n                                        <span className=\"label-body\">{option.text}</span>\r\n                                    </label>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"twelve columns\">\r\n                            <button disabled={selectedAnswer < 0} onClick={submit}>Submit Answer</button>\r\n                        </div>\r\n                    </div >\r\n                </>}\r\n            </div >\r\n        </>\r\n    );\r\n}","import { clearParticipant } from '../../store/actions/participant.action';\r\nimport { connect } from 'react-redux';\r\nimport { Header } from './header.component';\r\nimport { Action } from 'redux';\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    participant: state.participant.data\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (action: Action) => void) => ({\r\n    clearParticipant: () => dispatch(clearParticipant())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './header.component.scss';\r\nimport { Participant } from '../../models/participant.model';\r\n\r\ninterface Props {\r\n    participant: Participant;\r\n    clearParticipant: () => void;\r\n}\r\n\r\nexport const Header = (props: Props) => {\r\n    const history = useHistory();\r\n\r\n    function logout(event: React.MouseEvent<HTMLDivElement>) {\r\n        localStorage.removeItem('currentParticipant');\r\n        props.clearParticipant();\r\n        history.push('/register');\r\n    }\r\n\r\n    return (\r\n        <div id=\"nav\">\r\n            <div className=\"container\">\r\n                <Link to=\"/questions\" id=\"header-title\">Quizy</Link>\r\n                <Link to=\"/questions\">Questions</Link>\r\n                <Link to=\"/about\">About</Link>\r\n                <Link to=\"/admin\">Admin</Link>\r\n                {props.participant &&\r\n                    <div id=\"current-user\" className=\"u-pull-right\" onClick={logout}>\r\n                        Logout {props.participant && props.participant.name}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { IRootState } from './../../store/index';\r\nimport { connect } from 'react-redux';\r\nimport { Participant } from '../../models/participant.model';\r\nimport { postParticipant } from '../../store/actions/participant.action';\r\nimport { Register } from './register.component';\r\nimport './register.component.scss';\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n    participant: state.participant.data\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    postParticipant: (participant: Participant) => dispatch(postParticipant(participant))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Participant } from '../../models/participant.model';\r\nimport axios from 'axios';\r\n\r\ninterface Props {\r\n    participant: Participant | null;\r\n    postParticipant: (participant: Participant) => void;\r\n}\r\n\r\nexport const Register = (props: Props) => {\r\n    const { participant } = props;\r\n\r\n    const history = useHistory();\r\n    const [name, setName] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (participant) {\r\n            history.push('/questions');\r\n        }\r\n    }, [participant, history]);\r\n\r\n    function handleSubmit(event: React.MouseEvent<HTMLButtonElement>) {\r\n        const participant = new Participant();\r\n        participant.name = name;\r\n        axios.post<{ isNameAvailable: boolean }>('participants/IsNameAvailable', { name }).then(res => {\r\n            if (res.data.isNameAvailable) {\r\n                props.postParticipant(participant);\r\n            } else {\r\n                setError(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    function onChangeName(event: React.FormEvent<HTMLInputElement>) {\r\n        setName(event.currentTarget.value);\r\n        setError(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"twelve columns\">\r\n                    <h1>Register</h1>\r\n                    <p>\r\n                        Welcome to this cool quiz tool! Please put in you information below to\r\n                        get started with quizing!\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"twelve columns\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input name=\"name\" type=\"text\" className=\"u-full-width\" placeholder=\"John Doe\" id=\"name\" onChange={onChangeName} />\r\n                </div>\r\n                {error && (<div className=\"color-red\">Name is already in use</div>)}\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"twelve columns\">\r\n                    <button onClick={handleSubmit}>Submit</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const AdminRoute = ({ component, ...rest }: any) => {\r\n    const isAdmin = localStorage.getItem('isAdmin') === '1';\r\n    const routeComponent = (props: any) => (\r\n        isAdmin\r\n            ? React.createElement(component, props)\r\n            : <Redirect to=\"/questions\" />\r\n    );\r\n\r\n    return (\r\n        <Route {...rest} render={routeComponent} />\r\n    );\r\n}","import React from 'react';\r\nimport {\r\n    About,\r\n    AdminQuestionCreate,\r\n    AdminQuestions,\r\n    Header,\r\n    Questions,\r\n    Register\r\n} from './components';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Redirect,\r\n    Route,\r\n    Switch\r\n} from 'react-router-dom';\r\nimport './App.scss';\r\nimport { AdminRoute } from './routes';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Router basename=\"/react\">\r\n            <Header></Header>\r\n            <div className=\"container\">\r\n                <Switch>\r\n                    <Redirect exact from=\"/\" to=\"/questions\" />\r\n                    <Route path=\"/register\" component={Register} />\r\n                    <Route path=\"/questions\" component={Questions} />\r\n                    <Route path=\"/about\" component={About} />\r\n                    <AdminRoute path=\"/admin/questions/create/:questionId?\" component={AdminQuestionCreate} />\r\n                    <AdminRoute path=\"/admin\" component={AdminQuestions} />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n    CLEAR_PARTICIPANT,\r\n    POST_PARTICIPANT_ERROR,\r\n    POST_PARTICIPANT_PENDING,\r\n    POST_PARTICIPANT_SUCCESS,\r\n    PUT_PARTICIPANT_ERROR,\r\n    PUT_PARTICIPANT_PENDING,\r\n    PUT_PARTICIPANT_SUCCESS,\r\n    HANDLE_ANSWER\r\n} from './../actions/participant.action';\r\nimport { GET_PARTICIPANT_ERROR, GET_PARTICIPANT_PENDING, GET_PARTICIPANT_SUCCESS } from '../actions/participant.action';\r\nimport { Participant } from '../../models/participant.model';\r\n\r\nexport interface IParticipantsState {\r\n    pending: boolean;\r\n    data: Participant | null;\r\n    error: any;\r\n}\r\n\r\nexport const initialState: IParticipantsState = {\r\n    pending: false,\r\n    data: null,\r\n    error: null\r\n};\r\n\r\nexport function participantReducer(state: IParticipantsState = initialState, action: any): IParticipantsState {\r\n    switch (action.type) {\r\n        case GET_PARTICIPANT_PENDING:\r\n        case POST_PARTICIPANT_PENDING:\r\n        case PUT_PARTICIPANT_PENDING:\r\n            return {\r\n                ...state,\r\n                pending: true\r\n            };\r\n        case GET_PARTICIPANT_SUCCESS:\r\n        case POST_PARTICIPANT_SUCCESS:\r\n        case PUT_PARTICIPANT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                data: action.participant\r\n            };\r\n        case GET_PARTICIPANT_ERROR:\r\n        case POST_PARTICIPANT_ERROR:\r\n        case PUT_PARTICIPANT_ERROR:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                error: action.error\r\n            };\r\n        case CLEAR_PARTICIPANT:\r\n            return { ...initialState };\r\n        case HANDLE_ANSWER:\r\n            if (state.data) {\r\n                state.data.questionsAnswered++;\r\n                state.data.score += action.score;\r\n            }\r\n            \r\n            return { ...state };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    DELETE_QUESTION_ERROR,\r\n    DELETE_QUESTION_PENDING,\r\n    DELETE_QUESTION_SUCCESS,\r\n    POST_QUESTION_ERROR,\r\n    POST_QUESTION_PENDING,\r\n    POST_QUESTION_SUCCESS,\r\n    PUT_QUESTION_ERROR,\r\n    PUT_QUESTION_PENDING,\r\n    PUT_QUESTION_SUCCESS\r\n} from './../actions/question.action';\r\nimport { GET_QUESTIONS_ERROR, GET_QUESTIONS_PENDING, GET_QUESTIONS_SUCCESS } from '../actions/question.action';\r\nimport { Question } from '../../models/question.model';\r\n\r\nexport interface IQuestionsState {\r\n    pending: boolean;\r\n    data: Array<Question>;\r\n    error: any;\r\n}\r\n\r\nexport const initialState: IQuestionsState = {\r\n    pending: false,\r\n    data: [],\r\n    error: null\r\n};\r\n\r\nexport function questionsReducer(state: IQuestionsState = initialState, action: any): IQuestionsState {\r\n    switch (action.type) {\r\n        case GET_QUESTIONS_PENDING:\r\n        case POST_QUESTION_PENDING:\r\n        case PUT_QUESTION_PENDING:\r\n        case DELETE_QUESTION_PENDING:\r\n            return {\r\n                ...state,\r\n                pending: true\r\n            };\r\n        case GET_QUESTIONS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                data: action.questions\r\n            };\r\n        case POST_QUESTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                data: [...state.data, action.question]\r\n            };\r\n        case PUT_QUESTION_SUCCESS:\r\n            const questionIndexPut = state.data.findIndex(q => q.id === action.question.id);\r\n            state.data[questionIndexPut] = action.question;\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                data: [...state.data]\r\n            };\r\n        case DELETE_QUESTION_SUCCESS:\r\n            const questionIndexDelete = state.data.findIndex(q => q.id === action.question.id);\r\n            state.data.splice(questionIndexDelete, 1);\r\n            return {\r\n                ...state,\r\n                data: [...state.data]\r\n            };\r\n        case GET_QUESTIONS_ERROR:\r\n        case POST_QUESTION_ERROR:\r\n        case PUT_QUESTION_ERROR:\r\n        case DELETE_QUESTION_ERROR:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                error: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { questionsReducer } from './question.reducer';\r\nimport { participantReducer } from './participant.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    participant: participantReducer,\r\n    questions: questionsReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { IParticipantsState, initialState as participantInitialState } from './reducers/participant.reducer';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\nimport { IQuestionsState, initialState as questionsInitialState } from './reducers/question.reducer';\r\n\r\nexport interface IRootState {\r\n    questions: IQuestionsState;\r\n    participant: IParticipantsState;\r\n}\r\n\r\nconst initialState = {\r\n    questions: questionsInitialState,\r\n    participant: participantInitialState\r\n}\r\n\r\nexport default createStore(rootReducer, initialState, applyMiddleware(thunk));\r\n","import { Environment } from './environment';\r\n\r\nexport const devEnvironment: Environment = {\r\n    baseUrl: 'https://localhost:44313/api/'\r\n};\r\n\r\nexport default devEnvironment;","import { Environment } from \"./environment\";\r\n\r\nexport const prodEnvironment: Environment = {\r\n    baseUrl: 'production url/api/'\r\n};\r\n\r\nexport default prodEnvironment;","import devEnvironment from './dev.environment';\r\nimport prodEnvironment from \"./prod.environment\";\r\n\r\nexport interface Environment {\r\n    baseUrl: string;\r\n}\r\n\r\nexport default process.env.REACT_APP_STAGE === 'production' ? prodEnvironment : devEnvironment;\r\n","import App from './App';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport './index.scss';\r\nimport './skeleton.scss';\r\nimport './skeleton.normalize.scss';\r\nimport axios from 'axios';\r\nimport environment from './environment';\r\n\r\naxios.defaults.baseURL = environment.baseUrl;\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}